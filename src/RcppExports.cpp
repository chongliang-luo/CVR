// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// Newtonlogistic
arma::mat Newtonlogistic(arma::mat GZ, arma::mat B, arma::mat alpha, arma::mat beta, double mu, arma::mat Y, double h, arma::mat Zini);
RcppExport SEXP _CVR_Newtonlogistic(SEXP GZSEXP, SEXP BSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP muSEXP, SEXP YSEXP, SEXP hSEXP, SEXP ZiniSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type GZ(GZSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Zini(ZiniSEXP);
    rcpp_result_gen = Rcpp::wrap(Newtonlogistic(GZ, B, alpha, beta, mu, Y, h, Zini));
    return rcpp_result_gen;
END_RCPP
}
// Newtonpoisson
arma::mat Newtonpoisson(arma::mat GZ, arma::mat B, arma::mat alpha, arma::mat beta, double mu, arma::mat Y, double h, arma::mat Zini);
RcppExport SEXP _CVR_Newtonpoisson(SEXP GZSEXP, SEXP BSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP muSEXP, SEXP YSEXP, SEXP hSEXP, SEXP ZiniSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type GZ(GZSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Zini(ZiniSEXP);
    rcpp_result_gen = Rcpp::wrap(Newtonpoisson(GZ, B, alpha, beta, mu, Y, h, Zini));
    return rcpp_result_gen;
END_RCPP
}
// MGlasso_C
arma::mat MGlasso_C(arma::mat Y, arma::mat X, arma::vec lam, arma::mat B0, double conv, int maxiter);
RcppExport SEXP _CVR_MGlasso_C(SEXP YSEXP, SEXP XSEXP, SEXP lamSEXP, SEXP B0SEXP, SEXP convSEXP, SEXP maxiterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B0(B0SEXP);
    Rcpp::traits::input_parameter< double >::type conv(convSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    rcpp_result_gen = Rcpp::wrap(MGlasso_C(Y, X, lam, B0, conv, maxiter));
    return rcpp_result_gen;
END_RCPP
}
// coxph_lpl
double coxph_lpl(arma::vec event, arma::vec lp);
RcppExport SEXP _CVR_coxph_lpl(SEXP eventSEXP, SEXP lpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type event(eventSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lp(lpSEXP);
    rcpp_result_gen = Rcpp::wrap(coxph_lpl(event, lp));
    return rcpp_result_gen;
END_RCPP
}
// Newtoncox
arma::mat Newtoncox(arma::vec GZ, arma::vec Bbeta, double mu, double h, arma::vec Zini, arma::vec event);
RcppExport SEXP _CVR_Newtoncox(SEXP GZSEXP, SEXP BbetaSEXP, SEXP muSEXP, SEXP hSEXP, SEXP ZiniSEXP, SEXP eventSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type GZ(GZSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Bbeta(BbetaSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Zini(ZiniSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type event(eventSEXP);
    rcpp_result_gen = Rcpp::wrap(Newtoncox(GZ, Bbeta, mu, h, Zini, event));
    return rcpp_result_gen;
END_RCPP
}
// cvrsolver
Rcpp::List cvrsolver(arma::mat Y, Rcpp::List Xlist, arma::mat event, int rank, double eta, arma::vec Lam, std::string family, Rcpp::List Wini, std::string penalty, Rcpp::List opts);
RcppExport SEXP _CVR_cvrsolver(SEXP YSEXP, SEXP XlistSEXP, SEXP eventSEXP, SEXP rankSEXP, SEXP etaSEXP, SEXP LamSEXP, SEXP familySEXP, SEXP WiniSEXP, SEXP penaltySEXP, SEXP optsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Xlist(XlistSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type event(eventSEXP);
    Rcpp::traits::input_parameter< int >::type rank(rankSEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Lam(LamSEXP);
    Rcpp::traits::input_parameter< std::string >::type family(familySEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Wini(WiniSEXP);
    Rcpp::traits::input_parameter< std::string >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type opts(optsSEXP);
    rcpp_result_gen = Rcpp::wrap(cvrsolver(Y, Xlist, event, rank, eta, Lam, family, Wini, penalty, opts));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_coxph_logL_xt
Rcpp::List rcpp_coxph_logL_xt(arma::mat mydata, vec beta, bool derivative);
RcppExport SEXP _CVR_rcpp_coxph_logL_xt(SEXP mydataSEXP, SEXP betaSEXP, SEXP derivativeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type mydata(mydataSEXP);
    Rcpp::traits::input_parameter< vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< bool >::type derivative(derivativeSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_coxph_logL_xt(mydata, beta, derivative));
    return rcpp_result_gen;
END_RCPP
}
// norm21sp_rcpp
arma::sp_mat norm21sp_rcpp(arma::sp_mat A);
RcppExport SEXP _CVR_norm21sp_rcpp(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(norm21sp_rcpp(A));
    return rcpp_result_gen;
END_RCPP
}
// norm21_rcpp
arma::mat norm21_rcpp(arma::mat A);
RcppExport SEXP _CVR_norm21_rcpp(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(norm21_rcpp(A));
    return rcpp_result_gen;
END_RCPP
}
// MGlasso_ss0_Rcpp
arma::sp_mat MGlasso_ss0_Rcpp(arma::sp_mat XR, arma::sp_mat XX, double lam, arma::sp_mat A0, double conv, int maxiter);
RcppExport SEXP _CVR_MGlasso_ss0_Rcpp(SEXP XRSEXP, SEXP XXSEXP, SEXP lamSEXP, SEXP A0SEXP, SEXP convSEXP, SEXP maxiterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat >::type XR(XRSEXP);
    Rcpp::traits::input_parameter< arma::sp_mat >::type XX(XXSEXP);
    Rcpp::traits::input_parameter< double >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< arma::sp_mat >::type A0(A0SEXP);
    Rcpp::traits::input_parameter< double >::type conv(convSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    rcpp_result_gen = Rcpp::wrap(MGlasso_ss0_Rcpp(XR, XX, lam, A0, conv, maxiter));
    return rcpp_result_gen;
END_RCPP
}
// MGlasso_ss1_Rcpp
arma::mat MGlasso_ss1_Rcpp(arma::mat XR, arma::mat XX, arma::vec lam, arma::mat A0, double conv, int maxiter);
RcppExport SEXP _CVR_MGlasso_ss1_Rcpp(SEXP XRSEXP, SEXP XXSEXP, SEXP lamSEXP, SEXP A0SEXP, SEXP convSEXP, SEXP maxiterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type XR(XRSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type XX(XXSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type A0(A0SEXP);
    Rcpp::traits::input_parameter< double >::type conv(convSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    rcpp_result_gen = Rcpp::wrap(MGlasso_ss1_Rcpp(XR, XX, lam, A0, conv, maxiter));
    return rcpp_result_gen;
END_RCPP
}
// srrr_ss0_Rcpp
Rcpp::List srrr_ss0_Rcpp(arma::sp_mat XYlist, arma::sp_mat XX1, arma::sp_mat XX2, arma::sp_mat XX3, arma::sp_mat XX4, arma::sp_mat XX5, arma::sp_mat XX, int n, double Yss, arma::sp_mat A0, arma::sp_mat V0, int nrank, double lambda, double conv, int maxiter, double inner_conv, int inner_iter, int mglasso_impute, int procrustes_impute);
RcppExport SEXP _CVR_srrr_ss0_Rcpp(SEXP XYlistSEXP, SEXP XX1SEXP, SEXP XX2SEXP, SEXP XX3SEXP, SEXP XX4SEXP, SEXP XX5SEXP, SEXP XXSEXP, SEXP nSEXP, SEXP YssSEXP, SEXP A0SEXP, SEXP V0SEXP, SEXP nrankSEXP, SEXP lambdaSEXP, SEXP convSEXP, SEXP maxiterSEXP, SEXP inner_convSEXP, SEXP inner_iterSEXP, SEXP mglasso_imputeSEXP, SEXP procrustes_imputeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat >::type XYlist(XYlistSEXP);
    Rcpp::traits::input_parameter< arma::sp_mat >::type XX1(XX1SEXP);
    Rcpp::traits::input_parameter< arma::sp_mat >::type XX2(XX2SEXP);
    Rcpp::traits::input_parameter< arma::sp_mat >::type XX3(XX3SEXP);
    Rcpp::traits::input_parameter< arma::sp_mat >::type XX4(XX4SEXP);
    Rcpp::traits::input_parameter< arma::sp_mat >::type XX5(XX5SEXP);
    Rcpp::traits::input_parameter< arma::sp_mat >::type XX(XXSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type Yss(YssSEXP);
    Rcpp::traits::input_parameter< arma::sp_mat >::type A0(A0SEXP);
    Rcpp::traits::input_parameter< arma::sp_mat >::type V0(V0SEXP);
    Rcpp::traits::input_parameter< int >::type nrank(nrankSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type conv(convSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type inner_conv(inner_convSEXP);
    Rcpp::traits::input_parameter< int >::type inner_iter(inner_iterSEXP);
    Rcpp::traits::input_parameter< int >::type mglasso_impute(mglasso_imputeSEXP);
    Rcpp::traits::input_parameter< int >::type procrustes_impute(procrustes_imputeSEXP);
    rcpp_result_gen = Rcpp::wrap(srrr_ss0_Rcpp(XYlist, XX1, XX2, XX3, XX4, XX5, XX, n, Yss, A0, V0, nrank, lambda, conv, maxiter, inner_conv, inner_iter, mglasso_impute, procrustes_impute));
    return rcpp_result_gen;
END_RCPP
}
// srrr_ss1_Rcpp
Rcpp::List srrr_ss1_Rcpp(arma::mat XYlist, arma::cube XXlist, arma::mat XX, arma::vec popu_wt, arma::vec nn, arma::vec Yss, arma::mat A0, arma::mat V0, String method, double wgamma, arma::vec WA, int nrank, double lambda, double conv, int maxiter, double inner_conv, int inner_iter, int mglasso_impute, int procrustes_impute);
RcppExport SEXP _CVR_srrr_ss1_Rcpp(SEXP XYlistSEXP, SEXP XXlistSEXP, SEXP XXSEXP, SEXP popu_wtSEXP, SEXP nnSEXP, SEXP YssSEXP, SEXP A0SEXP, SEXP V0SEXP, SEXP methodSEXP, SEXP wgammaSEXP, SEXP WASEXP, SEXP nrankSEXP, SEXP lambdaSEXP, SEXP convSEXP, SEXP maxiterSEXP, SEXP inner_convSEXP, SEXP inner_iterSEXP, SEXP mglasso_imputeSEXP, SEXP procrustes_imputeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type XYlist(XYlistSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type XXlist(XXlistSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type XX(XXSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type popu_wt(popu_wtSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type nn(nnSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Yss(YssSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type A0(A0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type V0(V0SEXP);
    Rcpp::traits::input_parameter< String >::type method(methodSEXP);
    Rcpp::traits::input_parameter< double >::type wgamma(wgammaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type WA(WASEXP);
    Rcpp::traits::input_parameter< int >::type nrank(nrankSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type conv(convSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type inner_conv(inner_convSEXP);
    Rcpp::traits::input_parameter< int >::type inner_iter(inner_iterSEXP);
    Rcpp::traits::input_parameter< int >::type mglasso_impute(mglasso_imputeSEXP);
    Rcpp::traits::input_parameter< int >::type procrustes_impute(procrustes_imputeSEXP);
    rcpp_result_gen = Rcpp::wrap(srrr_ss1_Rcpp(XYlist, XXlist, XX, popu_wt, nn, Yss, A0, V0, method, wgamma, WA, nrank, lambda, conv, maxiter, inner_conv, inner_iter, mglasso_impute, procrustes_impute));
    return rcpp_result_gen;
END_RCPP
}
// list1
arma::mat list1(Rcpp::List Xlist);
RcppExport SEXP _CVR_list1(SEXP XlistSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type Xlist(XlistSEXP);
    rcpp_result_gen = Rcpp::wrap(list1(Xlist));
    return rcpp_result_gen;
END_RCPP
}
// array1
arma::mat array1(arma::cube Xcube);
RcppExport SEXP _CVR_array1(SEXP XcubeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type Xcube(XcubeSEXP);
    rcpp_result_gen = Rcpp::wrap(array1(Xcube));
    return rcpp_result_gen;
END_RCPP
}
// X2
arma::mat X2(arma::mat X);
RcppExport SEXP _CVR_X2(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(X2(X));
    return rcpp_result_gen;
END_RCPP
}
// MM
arma::mat MM(arma::mat A, arma::mat B);
RcppExport SEXP _CVR_MM(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(MM(A, B));
    return rcpp_result_gen;
END_RCPP
}
// norm21sp_rcpp
arma::sp_mat norm21sp_rcpp(arma::sp_mat A);
RcppExport SEXP _CVR_norm21sp_rcpp(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(norm21sp_rcpp(A));
    return rcpp_result_gen;
END_RCPP
}
// norm21_rcpp
arma::mat norm21_rcpp(arma::mat A);
RcppExport SEXP _CVR_norm21_rcpp(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(norm21_rcpp(A));
    return rcpp_result_gen;
END_RCPP
}
// fcpp
Rcpp::List fcpp(arma::mat A0, arma::cube Q);
RcppExport SEXP _CVR_fcpp(SEXP A0SEXP, SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A0(A0SEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Q(QSEXP);
    rcpp_result_gen = Rcpp::wrap(fcpp(A0, Q));
    return rcpp_result_gen;
END_RCPP
}
// ff
arma::sp_mat ff(arma::sp_mat A0, arma::mat V0);
RcppExport SEXP _CVR_ff(SEXP A0SEXP, SEXP V0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat >::type A0(A0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type V0(V0SEXP);
    rcpp_result_gen = Rcpp::wrap(ff(A0, V0));
    return rcpp_result_gen;
END_RCPP
}
// spmat_test
arma::sp_mat spmat_test(arma::cube M, arma::mat B, int sp);
RcppExport SEXP _CVR_spmat_test(SEXP MSEXP, SEXP BSEXP, SEXP spSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    Rcpp::traits::input_parameter< int >::type sp(spSEXP);
    rcpp_result_gen = Rcpp::wrap(spmat_test(M, B, sp));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_CVR_Newtonlogistic", (DL_FUNC) &_CVR_Newtonlogistic, 8},
    {"_CVR_Newtonpoisson", (DL_FUNC) &_CVR_Newtonpoisson, 8},
    {"_CVR_MGlasso_C", (DL_FUNC) &_CVR_MGlasso_C, 6},
    {"_CVR_coxph_lpl", (DL_FUNC) &_CVR_coxph_lpl, 2},
    {"_CVR_Newtoncox", (DL_FUNC) &_CVR_Newtoncox, 6},
    {"_CVR_cvrsolver", (DL_FUNC) &_CVR_cvrsolver, 10},
    {"_CVR_rcpp_coxph_logL_xt", (DL_FUNC) &_CVR_rcpp_coxph_logL_xt, 3},
    {"_CVR_norm21sp_rcpp", (DL_FUNC) &_CVR_norm21sp_rcpp, 1},
    {"_CVR_norm21_rcpp", (DL_FUNC) &_CVR_norm21_rcpp, 1},
    {"_CVR_MGlasso_ss0_Rcpp", (DL_FUNC) &_CVR_MGlasso_ss0_Rcpp, 6},
    {"_CVR_MGlasso_ss1_Rcpp", (DL_FUNC) &_CVR_MGlasso_ss1_Rcpp, 6},
    {"_CVR_srrr_ss0_Rcpp", (DL_FUNC) &_CVR_srrr_ss0_Rcpp, 19},
    {"_CVR_srrr_ss1_Rcpp", (DL_FUNC) &_CVR_srrr_ss1_Rcpp, 19},
    {"_CVR_list1", (DL_FUNC) &_CVR_list1, 1},
    {"_CVR_array1", (DL_FUNC) &_CVR_array1, 1},
    {"_CVR_X2", (DL_FUNC) &_CVR_X2, 1},
    {"_CVR_MM", (DL_FUNC) &_CVR_MM, 2},
    {"_CVR_norm21sp_rcpp", (DL_FUNC) &_CVR_norm21sp_rcpp, 1},
    {"_CVR_norm21_rcpp", (DL_FUNC) &_CVR_norm21_rcpp, 1},
    {"_CVR_fcpp", (DL_FUNC) &_CVR_fcpp, 2},
    {"_CVR_ff", (DL_FUNC) &_CVR_ff, 2},
    {"_CVR_spmat_test", (DL_FUNC) &_CVR_spmat_test, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_CVR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
